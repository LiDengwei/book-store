<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${master_jdbc_url}" />
		<property name="username" value="${master_jdbc_username}" />
		<property name="password" value="${master_jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="100" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${jdbc_validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>

    <bean id="paginationInterceptor" class="com.book.page.PageInterceptor">
    	 <property name="databaseType" value="mysql"/>
    </bean>
	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">
       	   <array><ref bean="paginationInterceptor"/></array>
    	</property>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:mybatis/*/*.xml" />
		<property name="typeAliasesPackage" value="com.book.model" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.book.service.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	 <tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置事务异常封装 -->
	<!--<bean id="persistenceExceptionTranslationPostProcessor"-->
		  <!--class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />-->


	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED"  />
			<tx:method name="insert*" propagation="REQUIRED"  />
			<tx:method name="save*" propagation="REQUIRED"  />
			<tx:method name="save" propagation="REQUIRED"  />
			<tx:method name="update*" propagation="REQUIRED"   />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="active*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />



			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*"  propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.book.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>


	<!--======= TCC Transaction Begin ================= -->
	<!-- 设置恢复策略(可选），V1.1.0 新增定时任务配置 -->
	<bean class="org.mengyun.tcctransaction.spring.recover.DefaultRecoverConfig">
		<!-- maxRetryCount表示一个事务最多尝试恢复次数，超过将不在自动恢复，需要人工干预，默认是30次 -->
		<property name="maxRetryCount" value="30"/>
		<!-- recoverDuration表示一个事务日志当超过一定时间间隔后没有更新就会被认为是发生了异常，需要恢复，
            恢复Job将扫描超过这个时间间隔依旧没有更新的事务日志，并对这些事务进行恢复，时间单位是秒，默认是120秒 -->
		<property name="recoverDuration" value="120"/>
		<!-- cronExpression表示恢复Job触发间隔配置，默认是(每分钟)0 */1 * * * ? -->
		<property name="cronExpression" value="0 */1 * * * ?"/>
	</bean>

	<!-- TCC 业务活动日志（事务日志）的数据源 -->
	<!--<bean id="tccDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
		  <!--init-method="init" destroy-method="clone">-->

		<!--<property name="validationQuery" value="${jdbc_validationQuery}" />-->
		<!--<property name="testOnBorrow" value="false" />-->
		<!--<property name="testOnReturn" value="false" />-->
		<!--<property name="testWhileIdle" value="true" />-->
		<!--&lt;!&ndash; 基本属性driverClassName、 url、user、password &ndash;&gt;-->
		<!--<property name="driverClassName" value="${jdbc_driver}" />-->
		<!--<property name="url" value="${tcc_jdbc_url}" />-->
		<!--<property name="username" value="${tcc_jdbc_username}" />-->
		<!--<property name="password" value="${tcc_jdbc_password}" />-->


		<!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
		<!--&lt;!&ndash; 通常来说，只需要修改initialSize、minIdle、maxActive &ndash;&gt;-->
		<!--&lt;!&ndash; 初始化时建立物理连接的个数，缺省值为0 &ndash;&gt;-->
		<!--<property name="initialSize" value="0" />-->
		<!--&lt;!&ndash; 最小连接池数量 &ndash;&gt;-->
		<!--<property name="minIdle" value="0" />-->
		<!--&lt;!&ndash; 最大连接池数量，缺省值为8 &ndash;&gt;-->
		<!--<property name="maxActive" value="20" />-->

		<!--&lt;!&ndash; 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 &ndash;&gt;-->
		<!--<property name="maxWait" value="60000" />-->
	<!--</bean>-->

	<!-- 使用SpringJdbc事务库 -->
	<!--<bean id="transactionRepository"-->
		  <!--class="org.mengyun.tcctransaction.spring.repository.SpringJdbcTransactionRepository">-->
		<!--<property name="dataSource" ref="tccDataSource"/>-->
		<!--<property name="domain" value="quantum"/>-->
		<!--<property name="tbSuffix" value="quantum"/>-->
	<!--</bean>-->
	<!--======= TCC Transaction End ================= -->


</beans>